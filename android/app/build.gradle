def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Default debug keystore info
def keyAliasDefault = 'androiddebugkey'
def keyPasswordDefault = 'android'
def storePasswordDefault = 'android'
def storeFileDefault = '../keystores/debug.keystore'


// Load a specific properties file to access the keystore if exists
def keystoreProperties = new Properties()
def keystorePropertiesFile = file('../key.properties')
if (keystorePropertiesFile.exists()) {
    println "Apply key.properties file"
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    // Load keystore properties from environment or set their default values
    println "key.properties file was not found. Use env or default value instead."
    def env = System.getenv()
    if (env['BITRISEIO_ANDROID_KEYSTORE_ALIAS']) keystoreProperties.put('keyAlias', env['BITRISEIO_ANDROID_KEYSTORE_ALIAS'])
    else keystoreProperties.put('keyAlias', keyAliasDefault)
    if (env['BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD']) keystoreProperties.put('keyPassword', env['BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD'])
    else keystoreProperties.put('keyPassword', keyPasswordDefault)
    if (env['BITRISEIO_ANDROID_KEYSTORE_PASSWORD']) keystoreProperties.put('storePassword', env['BITRISEIO_ANDROID_KEYSTORE_PASSWORD'])
    else keystoreProperties.put('storePassword', storePasswordDefault)
    if (env['BITRISEIO_ANDROID_KEYSTORE_URL']) keystoreProperties.put('storeFile', "my_keystore.jks")
    else keystoreProperties.put('storeFile', storeFileDefault)

    def keystorePropertiesFileUrl = file(env['HOME']+"/git/android/app/my_keystore.jks");
    if (keystorePropertiesFileUrl.exists()) {


        println "file /git/login_by_phone exist: "+env['HOME']+"/git/android/app/my_keystore.jks"

    }
    else {
        println "file /git/login_by_phone not exist: "+env['HOME']+"/git/android/app/my_keystore.jks"
    }
    println "keystoreProperties['storeFile'] "+keystoreProperties['storeFile'];
}


//def keystoreProperties = new Properties()
//def keystorePropertiesFile = rootProject.file('../key.properties')
//if (keystorePropertiesFile.exists()) {
//    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
//}



apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.login_by_phone"
        minSdkVersion 18
        targetSdkVersion 30
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
//        versionCode System.getenv('APPCENTER_BUILD_ID').toInteger()
        versionName flutterVersionName
    }
    signingConfigs {
//        release {
//            if (keystorePropertiesFile.exists())
//            {
//                keyAlias keystoreProperties['keyAlias']
//                keyPassword keystoreProperties['keyPassword']
//                storeFile rootProject.file("app/upload-keystore.jks")
////                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
//                storePassword keystoreProperties['storePassword']
//            }
//            else
//            {
//                storeFile rootProject.file("app/upload-keystore.jks")
//                storePassword System.getenv("APPCENTER_KEYSTORE_PASSWORD")
//                keyAlias System.getenv("APPCENTER_KEY_ALIAS")
//                keyPassword System.getenv("APPCENTER_KEY_PASSWORD")
//            }
//
//        }
        debug {
            keyAlias keyAliasDefault
            keyPassword keyPasswordDefault
            storePassword storePasswordDefault
            storeFile file(storeFileDefault)
        }
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storePassword keystoreProperties['storePassword']
            storeFile file(keystoreProperties['storeFile'])
        }
    }
    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
//    flavorDimensions "distribute"
//    productFlavors {
//        appCenter {
//            dimension "distribute"
//        }
//
//        googlePlay {
//            dimension "distribute"
//        }
//    }
//
//    // This is likely needed, see https://github.com/flutter/flutter/issues/58247
//    lintOptions {
//        disable 'InvalidPackage'
//        checkReleaseBuilds false
//    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation platform('com.google.firebase:firebase-bom:28.0.1')
    implementation "androidx.browser:browser:1.3.0"
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.google.firebase:firebase-analytics:19.0.0'
}